// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arikkfir/cloudflare-operator/internal (interfaces: CloudflareClient)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	cloudflare "github.com/cloudflare/cloudflare-go"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudflareClient is a mock of CloudflareClient interface.
type MockCloudflareClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudflareClientMockRecorder
}

// MockCloudflareClientMockRecorder is the mock recorder for MockCloudflareClient.
type MockCloudflareClientMockRecorder struct {
	mock *MockCloudflareClient
}

// NewMockCloudflareClient creates a new mock instance.
func NewMockCloudflareClient(ctrl *gomock.Controller) *MockCloudflareClient {
	mock := &MockCloudflareClient{ctrl: ctrl}
	mock.recorder = &MockCloudflareClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudflareClient) EXPECT() *MockCloudflareClientMockRecorder {
	return m.recorder
}

// CreateDNSRecord mocks base method.
func (m *MockCloudflareClient) CreateDNSRecord(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *bool, arg7 int, arg8 *uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNSRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDNSRecord indicates an expected call of CreateDNSRecord.
func (mr *MockCloudflareClientMockRecorder) CreateDNSRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNSRecord", reflect.TypeOf((*MockCloudflareClient)(nil).CreateDNSRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// DeleteDNSRecord mocks base method.
func (m *MockCloudflareClient) DeleteDNSRecord(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSRecord", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSRecord indicates an expected call of DeleteDNSRecord.
func (mr *MockCloudflareClientMockRecorder) DeleteDNSRecord(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSRecord", reflect.TypeOf((*MockCloudflareClient)(nil).DeleteDNSRecord), arg0, arg1, arg2, arg3, arg4)
}

// GetDNSRecord mocks base method.
func (m *MockCloudflareClient) GetDNSRecord(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*cloudflare.DNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSRecord", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*cloudflare.DNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSRecord indicates an expected call of GetDNSRecord.
func (mr *MockCloudflareClientMockRecorder) GetDNSRecord(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSRecord", reflect.TypeOf((*MockCloudflareClient)(nil).GetDNSRecord), arg0, arg1, arg2, arg3, arg4)
}

// UpdateDNSRecord mocks base method.
func (m *MockCloudflareClient) UpdateDNSRecord(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *bool, arg7 int, arg8 *uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDNSRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDNSRecord indicates an expected call of UpdateDNSRecord.
func (mr *MockCloudflareClientMockRecorder) UpdateDNSRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDNSRecord", reflect.TypeOf((*MockCloudflareClient)(nil).UpdateDNSRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}
